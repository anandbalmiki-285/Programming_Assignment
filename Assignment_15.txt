ðŸ’¡ **Question 1**

Given an arrayÂ **arr[ ]**Â of sizeÂ **N**Â havingÂ elements, theÂ task is to find the next greater element for each element of the array in order of their appearance in the array.Next greater element of an element in the array is the nearest element on the right which is greater than the current element.If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

**Example 1:**
Input:
N = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element
to 1 is 3 , 3 is 4 , 2 is 4 and for 4 ?
since it doesn't exist, it is -1.


**Example 2:**
Input:
N = 5, arr[] [6 8 0 1 3]
Output:
8 -1 1 3 -1
Explanation:
In the array, the next larger element to
6 is 8, for 8 there is no larger elements
hence it is -1, for 0 it is 1 , for 1 it
is 3 and then for 3 there is no larger
element on right and hence -1.

class Main
{
    // Find the next greater element for every array element
    public static void findNextGreaterElements(int[] input)
    {
        // base case
        if (input == null) {
            return;
        }
 
        // do for each element
        for (int i = 0; i < input.length; i++)
        {
            // keep track of the next greater element for element `input[i]`
            int next = -1;
 
            // process elements on the right of element `input[i]`
            for (int j = i + 1; j < input.length; j++)
            {
                // break the inner loop at the first larger element on the
                // right of element `input[i]`
                if (input[j] > input[i])
                {
                    next = input[j];
                    break;
                }
            }
 
            System.out.print(next + " ");
        }
    }
 
    public static void main(String[] args)
    {
        int[] input = { 2, 7, 3, 5, 4, 6, 8 };
        findNextGreaterElements(input);
    }
}



ðŸ’¡ **Question 2**

Given an arrayÂ **a**Â of integers of lengthÂ **n**, find the nearest smaller number for every element such that the smaller element is on left side.If no small element present on the left print -1.

**Example 1:**

Input: n = 3
a = {1, 6, 2}
Output: -1 1 1
Explaination: There is no number at the
left of 1. Smaller number than 6 and 2 is 1.

**Example 2 :**
Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see
the smaller numbers. But for 4 the smaller
numbers are 1, 0 and 3. But among them 3
is closest. Similary for 5 it is 4.


import java.util.Stack;
 
class Main
{
    // Find the previous smaller element for every array element
    public static void findPrevSmaller(int[] arr)
    {
        // base case
        if (arr == null || arr.length == 0) {
            return;
        }
 
        // create an empty stack
        Stack<Integer> s = new Stack<>();
 
        // do for each element
        for (int i = 0; i < arr.length; i++)
        {
            // loop till stack is empty
            while (!s.empty())
            {
                // If the stack's top element is less than the current element,
                // it is the previous smaller element
                if (s.peek() < arr[i])
                {
                    System.out.print(s.peek() + " ");
                    break;
                }
                // remove the stack's top element is less if it is greater or equal
                // to the current element
                else {
                    s.pop();
                }
            }
 
            // If the stack becomes empty, all elements to the left
            // of the current element are greater
            if (s.empty()) {
                System.out.print(-1 + " ");
            }
 
            // push current element into the stack
            s.push(arr[i]);
        }
    }
 
    public static void main(String[] args)
    {
        int[] arr = { 2, 5, 3, 7, 8, 1, 9 };
        findPrevSmaller(arr);
    }
}



ðŸ’¡ **Question 3**

Implement a StackÂ using two queuesÂ **q1**Â andÂ **q2**.

**Example 1:**

Input:
push(2)
push(3)
pop()
push(4)
pop()
Output:3 4
Explanation:
push(2)Â the stackÂ will be {2}
push(3)Â the stackÂ will be {2 3}
pop()   poped element will be 3Â the
Â        stackÂ will be {2}
push(4)Â the stackÂ will be {2 4}
pop() Â  poped element will be 4


**Example 2 :**
Input:
push(2)
pop()
pop()
push(3)
Output:2 -1

class MyStack {
    static Queue<Integer> q1;
        static Queue<Integer> q2;

    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }
    
    public void push(int x) {
        if(!q1.isEmpty()){
                q1.add(x);
            } else{
                q2.add(x);
            }
    }
    
    public int pop() {
        if(empty()){
                return -1;
            }

            int top =-1;
            if(!q1.isEmpty()){
                while(!q1.isEmpty()){
                    top = q1.remove();
                    if(q1.isEmpty()){
                        break;
                    }
                    q2.add(top);
                }
            } else{
                while(!q2.isEmpty()){
                    top=q2.remove();
                    if(q2.isEmpty()){
                        break;
                    }
                    q1.add(top);
                }

            }
            return top;
    }
    
    public int top() {
        
        if(empty()){
                return -1;
            }

            int top =-1;
            if(!q1.isEmpty()){
                while(!q1.isEmpty()){
                    top = q1.remove();
                    q2.add(top);
                }
            } else{
                while(!q2.isEmpty()){
                    top=q2.remove();
                    q1.add(top);
                }

            }
            return top;
    }
    
    public boolean empty() {
        return q1.isEmpty() && q2.isEmpty();
    }
}


ðŸ’¡ **Question 4**

You are given a stackÂ **St**. You have to reverse the stack using recursion.

**Example 1:**
Input:St = {3,2,1,7,6}
Output:{6,7,1,2,3}


**Example 2:**
Input:St = {4,3,9,6}
Output:{6,9,3,4}

import java.util.Stack;
 
class Main
{
    // Recursive function to insert an item at the bottom of a given stack
    public static void insertAtBottom(Stack<Integer> s, int item)
    {
        // base case: if the stack is empty, insert the given item at the bottom
        if (s.empty())
        {
            s.push(item);
            return;
        }
 
        // Pop all items from the stack and hold them in the call stack
        int top = s.pop();
        insertAtBottom(s, item);
 
        // After the recursion unfolds, push each item in the call stack
        // at the top of the stack
        s.push(top);
    }
 
    // Recursive function to reverse a given stack
    public static void reverseStack(Stack<Integer> s)
    {
        // base case: stack is empty
        if (s.empty()) {
            return;
        }
 
        // Pop all items from the stack and hold them in the call stack
        int item = s.pop();
        reverseStack(s);
 
        // After the recursion unfolds, insert each item in the call stack
        // at the bottom of the stack
        insertAtBottom(s, item);
    }
 
    public static void main(String[] args)
    {
        Stack<Integer> s = new Stack<>();
        for (int i = 1; i <= 5; i++) {
            s.push(i);
        }
 
        System.out.println("Original stack is " + s);
        reverseStack(s);
        System.out.println("Reversed stack is " + s);
    }
}


ðŸ’¡ **Question 5**

You are given a stringÂ **S**, the task is to reverse the string using stack.

**Example 1:**
Input: S="GeeksforGeeks"
Output: skeeGrofskeeG


import java.util.Stack;
 
class Main
{
    // Reverse a string using a stack container in Java
    public static String reverse(String str)
    {
        // create an empty stack
        Stack<Character> stack = new Stack<>();
 
        // push each character in the string into the stack
        char[] chars = str.toCharArray();
        for (char c: chars) {
            stack.push(c);
        }
 
        // pop all characters from the stack and
        // put them back to the character array
        for (int i = 0; i < str.length(); i++) {
            chars[i] = stack.pop();
        }
 
        // convert the char array to a string and return
        return new String(chars);
    }
 
    public static void main (String[] args)
    {
        String str = "Reverse me";
 
        str = reverse(str);
        System.out.println(str);
    }
}


ðŸ’¡Question-6

Given stringÂ **S**Â representing aÂ postfix expression, the task is to evaluate the expression and find the final value. Operators will only include the basic arithmetic operators likeÂ ***, /, + and -**.

**Example 1**
Input: S = "231*+9-"
Output: -4
Explanation:
After solving the given expression,
we have -4 as result.


**Example 2**
Input: S = "123+*8-"
Output: -3
Explanation:
After solving the given postfix
expression, we have -3 as result.

import java.util.*;
public class Main{

    // Function to evaluate the postfix expression
    static int evaluatePostfixExpression(char[] expression) {
        // Defining an stack of integer type.
        Stack<Integer> st=new Stack<>();

        // Traversing in the expression from left 
        // to right. 
        for (int i = 0; i < expression.length; i++){
            char c = expression[i];

            // If 'c' is a digit (operand)
            if (c >= '0' && c <= '9'){
                // Convert 'c' in integer and
                // push it into the stack.
                int temp = (int)(c - '0');
                st.push(temp);
            }
            // Otherwise it is an operator.
            else{
                // Pop element from the stack.
                int op1 = st.pop();
                // Pop another element from the stack. 
                int op2 = st.pop();

                // Use the switch case to deal with
                // the operand accordingly.
                switch(c){
                    case '+':
                        st.push(op2 + op1);
                        break;
                    case '-':
                        st.push(op2 - op1);
                        break;
                    case '*':
                        st.push(op2 * op1);
                        break;    
                    case '/':
                        st.push(op2 / op1);
                        break;
                }
            }
        }
        
        // Return the element at the top 
        // of the stack.
        return st.peek();
    }

    // Main function
    public static void main(String[] args) {

        // Postfix expression.
        String expression = "23*45+*";

        // Calling function to find the result
        // of the postfix expression.
        System.out.println(
            evaluatePostfixExpression(expression.toCharArray()));
    }

}



ðŸ’¡ **Question 7**

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement theÂ `MinStack`Â class:

- `MinStack()`Â initializes the stack object.
- `void push(int val)`Â pushes the elementÂ `val`Â onto the stack.
- `void pop()`Â removes the element on the top of the stack.
- `int top()`Â gets the top element of the stack.
- `int getMin()`Â retrieves the minimum element in the stack.

You must implement a solution withÂ `O(1)`Â time complexity for each function.

**Example 1:**
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2


class MinStack {
ArrayList<Integer> a = new ArrayList<>();
ArrayList<Integer> b = new ArrayList<>();
    public MinStack() {
        
    }
    
    public void push(int val) {
    a.add(val);
    if( b.isEmpty()){
        b.add(val);
    }
     else if(val<b.get(b.size()-1)){
        b.add(val);
    }
    else{
        
    }
    }
    
    public void pop() {
        if(a.isEmpty()){
            return;
        }
      int k= a.remove(a.size()-1);
      if(!a.contains(k) && b.contains(k)){
          b.remove(b.indexOf(k));
      }
    }
    
    public int top() {
    return a.get(a.size()-1);
    }
    
    public int getMin() {
  return b.get(b.size()-1);
    }
}


ðŸ’¡ **Question 8**

GivenÂ `n`Â non-negative integers representing an elevation map where the width of each bar isÂ `1`, compute how much water it can trap after raining.

**Example 1:**

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

**Example 2:**
Input: height = [4,2,0,3,2,5]
Output: 9

class Solution {
    public int trap(int[] height) {
        int left = 0, right = height.length - 1;
        int leftMax = height[0], rightMax = height[height.length - 1];
        int water = 0;
        while (left < right) {
            if (leftMax < rightMax) {
                left++;
                if (leftMax < height[left]) {
                    leftMax = height[left];
                } else {
                    water += leftMax - height[left];
                }
            } else {
                right--;
                if (rightMax < height[right]) {
                    rightMax = height[right];
                } else {
                    water += rightMax - height[right];
                }
            }
        }
        return water;
    }
}