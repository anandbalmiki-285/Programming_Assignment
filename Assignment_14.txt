ðŸ’¡ **Question 1**

Given a linked list ofÂ **N**Â nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.

**Example 1:**
Input:
N = 3
value[] = {1,3,4}
X = 2
Output:1
Explanation:The link list looks like
1 -> 3 -> 4
     ^    |
     |____|
A loop is present. If you remove it
successfully, the answer will be 1.
Input:
N = 4
value[] = {1,8,3,4}
X = 0
Output:1
Explanation:TheÂ Linked list does not
contains any loop.
Input:
N = 4
value[] = {1,2,3,4}
X = 1
Output:1
Explanation:The link list looks like
1 -> 2 -> 3 -> 4
^              |
|______________|
A loop is present.
If you remove it successfully,
the answer will be 1.

// A Linked List Node
class Node
{
    int data;
    Node next;
}
 
class Main
{
    // Utility function to create a new node with the given data and
    // pushes it onto the list's front
    public static Node push(Node head, int data)
    {
        Node node = new Node();
        node.data = data;
        node.next = head;
        return node;
    }
 
    // Utility function to print a linked list
    public static void printList(Node head)
    {
        Node curr = head;
        while (curr != null)
        {
            System.out.print(curr.data + " â€”> ");
            curr = curr.next;
        }
        System.out.println("null");
    }
 
    // Function to remove a cycle from a linked list pointed by `head` pointer.
    // The `slow` pointer points to one of the nodes involved in the cycle
    public static void removeCycle(Node slow, Node head)
    {
        // Find the count of nodes involved in the loop
        int k = 1;
        for (Node ptr = slow; ptr.next != slow; ptr = ptr.next) {
            k++;
        }
 
        // Get a pointer to k'th node from the head
        Node curr = head;
        for (int i = 0; i < k; i++) {
            curr = curr.next;
        }
 
        // Simultaneously move the `head` and `curr` pointers at the same speed
        // until they meet.
        while (curr != head)
        {
            curr = curr.next;
            head = head.next;
        }
 
        // `curr` points to the last node of the loop
        while (curr.next != head) {
            curr = curr.next;
        }
 
        // set the next pointer of `curr` to `null` to break the chain
        curr.next = null;
    }
 
    // Function to identify a cycle in a linked list using
    // Floydâ€™s cycle detection algorithm
    public static Node identifyCycle(Node head)
    {
        // take two pointers â€“ `slow` and `fast`
        Node slow = head, fast = head;
 
        while (fast != null && fast.next != null)
        {
            // move slow by one pointer
            slow = slow.next;
 
            // move fast by two pointers
            fast = fast.next.next;
 
            // if they meet any node, the linked list contains a cycle
            if (slow == fast) {
                return slow;
            }
        }
 
        // we reach here if the slow and fast pointer does not meet
        return null;
    }
 
    public static void main(String[] args)
    {
        // total number of nodes in the linked list
        int n = 5;
 
        // construct a linked list
        Node head = null;
        for (int i = n; i > 0; i--) {
            head = push(head, i);
        }
 
        // insert cycle
        head.next.next.next.next.next = head.next;
 
        // first check if a cycle is present in a linked list
        Node slow = identifyCycle(head);
 
        // if a cycle is found, remove it
        if (slow != null)
        {
            removeCycle(slow, head);
            printList(head);
        }
        else {
            System.out.println("No Cycle Found");
        }
    }
}


ðŸ’¡ **Question 2**

A numberÂ **N**Â is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.

Input:
LinkedList: 4->5->6
Output:457

Input:
LinkedList: 1->2->3
Output:124

class CarryOne {
 
    /* Linked list node */
    static class Node
    {
        int data;
        Node next;
    }
 
    /* Function to create a new node with given data */
    static Node newNode(int data)
    {
        Node new_node = new Node();
        new_node.data = data;
        new_node.next = null;
        return new_node;
    }
    static int addWithCarry(Node head)
    {
        if (head == null)
            return 1;
 
        // Add carry returned be next node call
        int res = head.data + addWithCarry(head.next);
 
        // Update data and return new carry
        head.data = (res) % 10;
        return (res) / 10;
    }
 
    // This function mainly uses addWithCarry().
    static Node addOne(Node head)
    {
        int carry = addWithCarry(head);
 
        // If there is carry after processing all nodes,
        // then we need to add a new node to linked list
        if (carry > 0)
        {
            Node newNode = newNode(carry);
            newNode.next = head;
            return newNode; // New node becomes head now
        }
 
        return head;
    }
 
    // A utility function to print a linked list
    static void printList(Node node)
    {
        while (node != null)
        {
            System.out.print(node.data);
            node = node.next;
        }
        System.out.println();
    }
 
    /* Driver code */
    public static void main(String[] args)
    {
        Node head = newNode(1);
        head.next = newNode(2);
        head.next.next = newNode(2);

        System.out.print("List is ");
        printList(head);
 
        head = addOne(head);
        System.out.println();
        System.out.print("Resultant list is ");
        printList(head);
    }
}



ðŸ’¡ **Question 3**

Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:(i) aÂ **next**Â pointer to the next node,(ii) aÂ **bottom**Â pointerÂ to a linked list where this node is head.Each of theÂ sub-linked-list is in sorted order.Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order.Â **Note:**Â The flattened list will be printed using the bottom pointer instead of next pointer.

**Example 1:**
Input:
5 -> 10 -> 19 -> 28
|     |     |     |
7     20    22   35
|           |     |
8          50    40
|                 |
30               45
Output:Â 5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every
node in a single level.(Note:| represents the bottom pointer.)

Input:
5 -> 10 -> 19 -> 28
|          |
7          22
|          |
8          50
|
30
Output: 5->7->8->10->19->22->28->30->50
Explanation:
The resultant linked lists has every
node in a single level.

(Note:| represents the bottom pointer.)

class Solution
{
    Node mergeTwoLists(Node a, Node b) {
        
        Node temp = new Node(0);
        Node res = temp; 
        
        while(a != null && b != null) {
            if(a.data < b.data) {
                temp.bottom = a; 
                temp = temp.bottom; 
                a = a.bottom; 
            }
            else {
                temp.bottom = b;
                temp = temp.bottom; 
                b = b.bottom; 
            }
        }
        
        if(a != null) temp.bottom = a; 
        else temp.bottom = b;
        return res.bottom; 
    
    }
    Node flatten(Node root)
    {
       
            if (root == null || root.next == null) 
                return root; 
      
            // recur for list on right 
            root.next = flatten(root.next); 
      
            // now merge 
            root = mergeTwoLists(root, root.next); 
      
            // return the root 
            // it will be in turn merged with its left 
            return root; 
    }
}


ðŸ’¡ **Question 4**

You are given a specialÂ linked listÂ withÂ **N**Â nodes where each node has aÂ next pointer pointing to itsÂ next node. You are also givenÂ **M**Â random pointers, where you will be givenÂ **M**Â number of pairs denoting two nodesÂ **a**Â andÂ **b**Â Â **i.e.Â a->arb = b**Â (arb is pointer to random node)**.**

Construct a copy of the given list. The copy should consist of exactlyÂ **N**Â new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodesÂ **X**Â andÂ **Y**Â in the original list, whereÂ **X.arb**Â **-->**Â **Y**, then for the corresponding two nodesÂ **x**Â andÂ **y**Â in the copied list,Â **x.arb --> y.**

Return the head of the copied linked list.

Input:
N = 4, M = 2
value = {1,2,3,4}
pairs = {{1,2},{2,4}}
Output:1
Explanation:In this test case, there
are 4 nodes in linked list.Â  Among these
4 nodes,Â  2 nodes have arbitrary pointer
set, rest two nodes have arbitrary pointer
as NULL. Second line tells us the value
of four nodes. The third line gives the
information about arbitrary pointers.
The first node arbitrary pointer is set to
node 2.Â  The second nodeÂ arbitrary pointer
is set to node 4.

Input:
N = 4, M = 2
value[] = {1,3,5,9}
pairs[] = {{1,1},{3,4}}
Output:1
Explanation:In the given testcase ,
applying the method as stated in the
above example, the output will be 1.

import java.util.*;

class Node {
        int val;
        Node next;
        Node random;
        Node(int value) {
            val = value;
            next = null;
            random = null;
        }
}
class Solution{
static Node copyRandomList(Node head) {
    HashMap<Node,Node> hashMap=new HashMap<>();
    Node temp = head;
//first iteration for inserting deep nodes of every node in the hashmap.
    while(temp != null) {
        Node newNode = new Node(temp.val);
        hashMap.put(temp,newNode);
        temp = temp.next;
    }
    Node t = head;
//second iteration for linking next and random pointer as given question.
    while(t != null) {
        Node node = hashMap.get(t);
        node.next = (t.next != null) ? hashMap.get(t.next):null;
        node.random = (t.random != null) ? hashMap.get(t.random):null;
        t = t.next;
    }
    return hashMap.get(head);
}

static void printList(Node head) {
    while(head != null) {
        System.out.print(head.val+":");
        if(head.next != null)
        System.out.print(head.next.val);
        else
        System.out.print("NULL");
        if(head.random != null)
        System.out.print(","+head.random.val);
        else
        System.out.print(",NULL");
        System.out.println();
        head = head.next;
    }
}

public static void main(String args[]) {
    Node head = null;
    
    Node node1 = new Node(1);
    Node node2 = new Node(2);
    Node node3 = new Node(3);
    Node node4 = new Node(4);
    
    head = node1;
    head.next = node2;
    head.next.next = node3;
    head.next.next.next = node4;
    
    head.random = node4;
    head.next.random = node1;
    head.next.next.random = null;
    head.next.next.next.random = node2;
    
    System.out.println("Original list:(current node:node pointed by next pointer,
    node pointed by random pointer)");
    printList(head);
    
    System.out.println("Copy list:(current node:node pointed by next pointer,node 
    pointed by random pointer)");
    Node newHead = copyRandomList(head);
    printList(newHead);
}
}


ðŸ’¡ **Question 5**

Given theÂ `head`Â of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and returnÂ *the reordered list*.

TheÂ **first**Â node is consideredÂ **odd**, and theÂ **second**Â node isÂ **even**, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problemÂ inÂ `O(1)`Â extra space complexity andÂ `O(n)`Â time complexity.

class Solution {
    public ListNode oddEvenList(ListNode head) {
    ListNode es=null,ee=null,os=null,oe = null;
    // es->even start  ee->even end  os->odd start  oe->odd end
    int count=0;
    ListNode curr = head;
    while(curr!=null){
            count++;
            if(count%2 != 0){  if(os==null) {os = oe = curr;}  
            else  {oe.next = curr;  oe = oe.next; } 
    }
    else{
        if(es==null){
        es = ee = curr;}
        else{
        ee.next = curr;
        ee = ee.next;
    }}
    curr = curr.next;
    }
    if(os==null || es==null)   return head;
    oe.next = es;
    ee.next = null;    
    return os;
    }
}


ðŸ’¡ **Question 6**

Given a singly linked list of sizeÂ **N**. The task is toÂ **left-shift**Â the linked list byÂ **k**Â nodes, whereÂ **k**Â is a given positive integer smaller than or equal to length of the linked list.

**Example 1:**
Input:
N = 5
value[] = {2, 4, 7, 8, 9}
k = 3
Output:8 9 2 4 7
Explanation:Rotate 1:4 -> 7 -> 8 -> 9 -> 2
Rotate 2:Â 7Â -> 8Â -> 9Â -> 2Â -> 4
Rotate 3:Â 8Â -> 9Â -> 2Â -> 4Â -> 7

Input:
N = 8
value[] = {1, 2, 3, 4, 5, 6, 7, 8}
k = 4
Output:5 6 7 8 1 2 3 4

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        
        if(head == null) {
            return head;
        }

        int length = 1;
        ListNode tail = head;

        while(tail.next != null) {
            tail = tail.next;
            length++;
        }

        int rotations = k % length;
        int newLastIndex = length - rotations;

        if(rotations == 0) {
            return head;
        }

        ListNode newLastNode = head;
        
        while(newLastIndex > 1) {
            newLastNode = newLastNode.next;
            newLastIndex--;
        }

        ListNode newHead = newLastNode.next;
        newLastNode.next = null;
        tail.next = head;
        head = newHead;

        return head;
    }
}


ðŸ’¡ **Question 7**

You are given theÂ `head`Â of a linked list withÂ `n`Â nodes.

For each node in the list, find the value of theÂ **next greater node**. That is, for each node, find the value of the first node that is next to it and has aÂ **strictly larger**Â value than it.

Return an integer arrayÂ `answer`Â whereÂ `answer[i]`Â is the value of the next greater node of theÂ `ith`Â node (**1-indexed**). If theÂ `ith`Â node does not have a next greater node, setÂ `answer[i] = 0`.

class Solution {
    public int[] nextLargerNodes(ListNode head) {
        ArrayList<Integer> l = new ArrayList<>();
        int n=0;
        while(head!=null){
            n++;
            l.add(head.val);
            head=head.next;
        }

        int[] ans = new int[n];
        Stack<Integer> s = new Stack<>();
        for(int i=l.size()-1;i>=0;i--){
            while(!s.isEmpty() && s.peek()<=l.get(i)){
                s.pop();
            }
            if(s.isEmpty()) ans[i]=0;
            else ans[i]=s.peek();
            s.push(l.get(i));
        }

        return ans;
        
    }
}


ðŸ’¡ **Question 8**

Given theÂ `head`Â of a linked list, we repeatedly delete consecutive sequences of nodes that sum toÂ `0`Â until there are no such sequences.

After doing so, return the head of the final linked list.Â  You may return any such answer.

(Note that in the examples below, all sequences are serializations ofÂ `ListNode`Â objects.)

**Example 1:**

Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.

Example 2:
Input: head = [1,2,3,-3,4]
Output: [1,2,4]
Example 3:
Input: head = [1,2,3,-3,-2]
Output: [1]


class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        int sum = 0;
    ListNode dm = new ListNode(0);
    dm.next = head;

    Map<Integer, ListNode> mp = new HashMap<>();
    mp.put(0, dm);


    for (ListNode i = dm; i != null; i = i.next) {
        sum += i.val;
        mp.put(sum, i);
    }


    sum = 0;
    for (ListNode i = dm; i != null; i = i.next) {
        sum += i.val;
        i.next = mp.get( sum ).next;
    }
    
    return dm.next;
    }
}
