ğŸ’¡ **Question 1**

Given a stringÂ `s`,Â *find the first non-repeating character in it and return its index*. If it does not exist, returnÂ `-1`.

**Example 1:**

```
Input: s = "leetcode"
Output: 0

```

**Example 2:**

```
Input: s = "loveleetcode"
Output: 2

```

**Example 3:**

Input: s = "aabb"
Output: -1


class Main
{
    public static void main(String args[])
    {
        String inputStr ="prepinsta";
        boolean flag = true;

        for(char i :inputStr.toCharArray())
        {
            // if current character is the last occurrence in the string
            if (inputStr.indexOf(i) == inputStr.lastIndexOf(i))
            {
                System.out.println("First non-repeating character is: "+ i);
                flag = false;
                break;
            }
        }

        if(flag)
            System.out.println("There is no non repeating character in input string");
    }
}



ğŸ’¡ **Question 2**

Given aÂ **circular integer array**Â `nums`Â of lengthÂ `n`, returnÂ *the maximum possible sum of a non-emptyÂ **subarray**Â of*Â `nums`.

AÂ **circular array**Â means the end of the array connects to the beginning of the array. Formally, the next element ofÂ `nums[i]`Â isÂ `nums[(i + 1) % n]`Â and the previous element ofÂ `nums[i]`Â isÂ `nums[(i - 1 + n) % n]`.

AÂ **subarray**Â may only include each element of the fixed bufferÂ `nums`Â at most once. Formally, for a subarrayÂ `nums[i], nums[i + 1], ..., nums[j]`, there does not existÂ `i <= k1`,Â `k2 <= j`Â withÂ `k1 % n == k2 % n`.

**Example 1:**

```
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

```

**Example 2:**

```
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

```

**Example 3:**
<aside>
ğŸ’¡ **Question 2**

Given aÂ **circular integer array**Â `nums`Â of lengthÂ `n`, returnÂ *the maximum possible sum of a non-emptyÂ **subarray**Â of*Â `nums`.

AÂ **circular array**Â means the end of the array connects to the beginning of the array. Formally, the next element ofÂ `nums[i]`Â isÂ `nums[(i + 1) % n]`Â and the previous element ofÂ `nums[i]`Â isÂ `nums[(i - 1 + n) % n]`.

AÂ **subarray**Â may only include each element of the fixed bufferÂ `nums`Â at most once. Formally, for a subarrayÂ `nums[i], nums[i + 1], ..., nums[j]`, there does not existÂ `i <= k1`,Â `k2 <= j`Â withÂ `k1 % n == k2 % n`.

**Example 1:**

```
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

```

**Example 2:**

```
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

```

**Example 3:**

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.


import java.util.Arrays;
 
class Main
{
    // Function to find contiguous subarray with the largest sum
    // in a given set of integers
    public static int kadane(int[] A)
    {
        // stores the sum of maximum subarray found so far
        int max_so_far = 0;
 
        // stores the maximum sum of subarray ending at the current position
        int max_ending_here = 0;
 
        // traverse the given array
        for (int value: A)
        {
            // update the maximum sum of subarray "ending" at index `i` (by adding the
            // current element to maximum sum ending at previous index `i-1`)
            max_ending_here = max_ending_here + value;
 
            // if the maximum sum is negative, set it to 0 (which represents
            // an empty subarray)
            max_ending_here = Integer.max(max_ending_here, 0);
 
            // update result if the current subarray sum is found to be greater
            max_so_far = Integer.max(max_so_far, max_ending_here);
        }
 
        return max_so_far;
    }
 
    // Function to find the maximum sum circular subarray in a given array
    public static int runCircularKadane(int[] A)
    {
        // empty array has sum of 0
        if (A.length == 0) {
            return 0;
        }
 
        // find the maximum element present in a given array
        int max = Arrays.stream(A).max().getAsInt();
 
        // if the array contains all negative values, return the maximum element
        if (max < 0) {
            return max;
        }
 
        // negate all the array elements
        Arrays.setAll(A, i -> -A[i]);
 
        // run Kadaneâ€™s algorithm on the modified array
        int neg_max_sum = kadane(A);
 
        // restore the array
        Arrays.setAll(A, i -> -A[i]);
 
        /* Return the maximum of the following:
            1. Sum returned by Kadaneâ€™s algorithm on the original array.
            2. Sum returned by Kadaneâ€™s algorithm on the modified array +
               the sum of all the array elements.
        */
 
        return Integer.max(kadane(A), Arrays.stream(A).sum() + neg_max_sum);
    }
 
    public static void main(String[] args)
    {
        int[] A = { 2, 1, -5, 4, -3, 1, -3, 4, -1 };
 
        System.out.println("The sum of the subarray with the largest sum is " +
                runCircularKadane(A));
    }
}




ğŸ’¡ **Question 3**

The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbersÂ `0`Â andÂ `1`Â respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in aÂ **stack**. At each step:

- If the student at the front of the queueÂ **prefers**Â the sandwich on the top of the stack, they willÂ **take it**Â and leave the queue.
- Otherwise, they willÂ **leave it**Â and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arraysÂ `students`Â andÂ `sandwiches`Â whereÂ `sandwiches[i]`Â is the type of theÂ `ith`Â sandwich in the stack (`i = 0`Â is the top of the stack) andÂ `students[j]`Â is the preference of theÂ `jth`Â student in the initial queue (`j = 0`Â is the front of the queue). ReturnÂ *the number of students that are unable to eat.*

**Example 1:**

```
Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
Hence all students are able to eat.

```

**Example 2:**
Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3



class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        int circularSandwiches = 0;
        int squareSandwiches = 0;

        for (int i = 0; i < students.length; ++i) {
            if (students[i] == 0) {
                ++circularSandwiches;
            } else {
                ++squareSandwiches;
            }
        }

        for (int i = 0; i < sandwiches.length; ++i) {
            if (sandwiches[i] == 0) {
                if (circularSandwiches == 0) {
                    return squareSandwiches;
                }

                --circularSandwiches;
            } else {
                if (squareSandwiches == 0) {
                    return circularSandwiches;
                }

                --squareSandwiches;
            }
        }

        return circularSandwiches + squareSandwiches;
    }
}



ğŸ’¡ **Question 4**

You have aÂ `RecentCounter`Â class which counts the number of recent requests within a certain time frame.

Implement theÂ `RecentCounter`Â class:

- `RecentCounter()`Â Initializes the counter with zero recent requests.
- `int ping(int t)`Â Adds a new request at timeÂ `t`, whereÂ `t`Â represents some time in milliseconds, and returns the number of requests that has happened in the pastÂ `3000`Â milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive rangeÂ `[t - 3000, t]`.

It isÂ **guaranteed**Â that every call toÂ `ping`Â uses a strictly larger value ofÂ `t`Â than the previous call.

**Example 1:**

Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1,100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1,100,3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1,100,3001,3002], range is [2,3002], return 3



import java.io.*;
import java.util.*;

public class Main {
  public static class RecentCounter {

    public RecentCounter() {
    }

    public int ping(int t) {
      return 0;
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader read = new BufferedReader(new InputStreamReader(System.in));

    RecentCounter obj = new RecentCounter();

    while (read.ready()) {
      int val = Integer.parseInt(read.readLine());
      int ans = obj.ping(val);
      System.out.println(ans);
    }

  }
}



<aside>
ğŸ’¡ **Question 5**

There areÂ `n`Â friends that are playing a game. The friends are sitting in a circle and are numbered fromÂ `1`Â toÂ `n`Â inÂ **clockwise order**. More formally, moving clockwise from theÂ `ith`Â friend brings you to theÂ `(i+1)th`Â friend forÂ `1 <= i < n`, and moving clockwise from theÂ `nth`Â friend brings you to theÂ `1st`Â friend.

The rules of the game are as follows:

1. **Start**Â at theÂ `1st`Â friend.
2. Count the nextÂ `k`Â friends in the clockwise directionÂ **including**Â the friend you started at. The counting wraps around the circle and may count some friends more than once.
3. The last friend you counted leaves the circle and loses the game.
4. If there is still more than one friend in the circle, go back to stepÂ `2`Â **starting**Â from the friendÂ **immediately clockwise**Â of the friend who just lost and repeat.
5. Else, the last friend in the circle wins the game.

Given the number of friends,Â `n`, and an integerÂ `k`, returnÂ *the winner of the game*.

**Example 1:**

!https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png

```
Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.
```

**Example 2:**

Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.

class Solution {
    public int findTheWinner(int n, int k) {
        Queue<Integer> circularGame = new LinkedList<>();
        
        for (int i = 1; i <= n; ++i) {
            circularGame.add(i);
        }
        
        while (circularGame.size() > 1) {
            int count = k;
            
            while (count > 1) {
                int current = circularGame.poll();
                circularGame.add(current);
                
                --count;
            }
            
            circularGame.poll();
        }
        
        return circularGame.peek();
    }
}



ğŸ’¡ **Question 6**

You are given an integer arrayÂ `deck`. There is a deck of cards where every card has a unique integer. The integer on theÂ `ith`Â card isÂ `deck[i]`.

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

1. Take the top card of the deck, reveal it, and take it out of the deck.
2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.

ReturnÂ *an ordering of the deck that would reveal the cards in increasing order*.

**Note**Â that the first entry in the answer is considered to be the top of the deck.

**Example 1:**

```
Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation:
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.

```

**Example 2:**

Input: deck = [1,1000]
Output: [1,1000]


class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        int n = deck.length;
        Queue<Integer> index = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            index.add(i);
        }

        Arrays.sort(deck);
        int[] rst = new int[n];
        for (int card : deck) {
            // assign one value to the rst each time
            rst[index.poll()] = card;
            // do the simulation (remove the next value to the queue's end)
            if (!index.isEmpty()) {
                index.add(index.poll());
            }
        }
        return rst;
    }
}